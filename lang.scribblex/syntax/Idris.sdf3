module Idris

// This grammar is meant for generation of Idris only -- not for parsing.

imports

  Common
  
context-free syntax

  Start.IdrisModule = <
import Control.ST
import Control.ST.ImplicitCall
import Data.String

<{DataDef "\n\n"}*>

<Interface>

-- Local Variables:
-- idris-load-packages: ("contrib")
-- End:
>

  DataDef.Data = <data <ID> : Type where
  <{GADTK "\n"}*>>
  
  GADTK.K = [[ID] : [GADTParams?] [ID] [TExpr*]]
  
  GADTParams = [[{KParam " -> "}*] ->]
  
  KParam.NamedParam = NamedParam
  KParam.Param      = TExpr
  
  FApp.App = <<ID> <Expr*>>
  
  NamedParam.Param = <(<ID> : <TExpr>)>
  
  TypeSignature.Sig = <<ID> : <TExpr>>
  
  Expr.Id     = ID
  Expr.NilL   = <[]>
  Expr.List   = <[<{Expr ","}*>]>
  Expr.STCons = <<Expr> ::: <Expr>>
  Expr.App    = <<Expr> <Expr>> {left}
  Expr.AppBr  = 
    <<Expr>
       <Expr>> {left}
  Expr.Case   =
    <case <Expr> of
  <{Case "\n"}*>>
  Expr.Fun    = [\\ [ID] => [Expr]]
  Expr.FunBr  = 
    [\\ [ID] =>
  [Expr]]
  Expr.Unit   = "()"
  Expr.DPairT = <<ID> : <Expr> ** <Expr>>
  Expr.Pair   = <<Expr> , <Expr>>
  Expr.Eq     = <<Expr> = <Expr>>
  Expr.Brack  = <(<Expr>)> // bracket constructor for pretty-printing
  Expr        = <(<Expr>)> {bracket}
  
  TExpr.ExprT  = Expr
  TExpr.ArrowT = [[TExpr] -> [TExpr]]
  TExpr.ArrowTBr = [[TExpr] ->
  [TExpr]]
  TExpr.PiT    = [([ID] : [TExpr]) -> [TExpr]]
  TExpr.PiTBr  = [([ID] : [TExpr]) ->
  [TExpr]]
  TExpr.Brack  = <(<TExpr>)> // bracket constructor for pretty-printing
  TExpr        = <(<TExpr>)> {bracket}
  
  Interface.Interface = <interface <ID> <NamedParam*> where
  <{TypeSignature "\n\n"}*>>

  Case.Case = [[Pattern] =>
  [Expr]]
  
  Pattern.Id    = ID
  Pattern.App   = <<ID> <Pattern+>>
  Pattern.Tuple = {Pattern " , "}*
  Pattern.Brack = <(<Pattern>)> // bracket constructor for pretty-printing
  Pattern       = <(<Pattern>)> {bracket}
