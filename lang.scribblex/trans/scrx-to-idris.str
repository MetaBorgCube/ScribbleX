module scrx-to-idris

imports
  signatures/ScribbleX-sig
  pp
  signatures/Idris-sig
  scribblex

signature
  
  sorts PayloadKind constructors // used for case analysis on payload in result types
    SimpleType    : Expr -> PayloadKind
    SingletonDecl : ID * Expr -> PayloadKind
    SingletonRef  : ID * Expr -> PayloadKind

rules

  test-local-to-idris:
    mod -> result
    with
      ( <strip-annos; scrx-to-idris; pp-ScribbleX-string> mod
      ; result := SUCCEEDS())
      <+ result := FAILS()

  scrx-to-idris:
    Module(mname, tdefs, protocol@Local(_, roles, _)) ->
      <trans-protocol> (td_ctx, protocol)
    where // initialize counters used for fresh names
      <new-counter> "S"
    ; <new-counter> "payloadId"
    ; <new-counter> "C"
    ; <new-counter> "paramId"
    ; <foldr(!(),
        \ (Role(x), _) ->
            <concat-strings; new-counter> ["choice_", x] \)>
        roles
    ; td_ctx := <map(\ TDef(x, arity) -> (x, arity) \)> tdefs

rules

  trans-protocol:
    (td_ctx, Local(pname, roles, interaction)) ->
      IdrisModule(
        [Data("State", states')|choices'],
        Interface(<ucfirst> pname, [Param("m", ArrowT(<mk-type-id> "Type", <mk-type-id> "Type"))],
          signatures'))
    where
      (signatures', states', choices') :=
        <trans-maybe-interaction> 
          (pname,
           interaction,
           [],
           [],
           td_ctx,
           [Sig("StateT", ArrowT(<mk-type-id> "State", <mk-type-id> "Type")),
            Sig("start", <mk-strans-nobr> (Id("Var"), NilL(), 
                                           Brack(Fun("l", List([STCons(Id("l"), App(Id("StateT"), Id("Ready")))])))))],
           [K("Ready", None(), "State", [])],
           [],
           Id("Ready"))
     
rules

  trans-maybe-interaction:
    (pname, None(), ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (signatures, states, choices)
  
  trans-maybe-interaction:
    (pname, Some(i), ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      <trans-interaction>
        (pname, i, ctx, rctx, td_ctx, signatures, states, choices, prev-state)
      
rules
  
  trans-interaction:
    (pname,
     From(msg, payload, from-role, opt-cont),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (signatures', states', choices')
      where
        not(Some(Continue(_)) := opt-cont)
      ; (tys, ctx') :=
          <trans-rcv-interaction> (msg, payload, ctx, td_ctx)
      ; (state', new-state) := <concat; new-state> [ctx, ctx']
      ; sig :=
          Sig(msg,
            PiTBr("l", <mk-type-id> "Var",
              <mk-strans>
                (<payload-types-to-return-types> tys,
                 List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                 <generalize-rcv-result> (new-state, tys))))
      ; (signatures', states', choices') :=
          <trans-maybe-interaction> 
            (pname,
             opt-cont,
             <concat> [ctx, ctx'],
             rctx,
             td_ctx,
             <concat> [signatures, [sig]],
             <concat> [states, [state']],
             choices,
             new-state)
  
  trans-interaction:
    (pname,
     From(msg, payload, from-role, Some(Continue(r))),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (<concat> [signatures, [sig]], states, choices)
      where
        (tys, ctx') :=
          <trans-rcv-interaction> (msg, payload, ctx, td_ctx)
      ; sig :=
          Sig(msg,
            PiTBr("l", <mk-type-id> "Var",
              <mk-strans>
                (<payload-types-to-return-types> tys,
                 List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                 Brack(App(Id("const"),
                   List([STCons(Id("l"), App(Id("StateT"), <lookup> (r, rctx)))]))))))
  
  trans-rcv-interaction:
    (msg, payload, ctx, td_ctx) ->
      <foldl({ ctx'', ty' :
             \ (pl, (tys', ctx')) ->
                 ([ty'|tys'], <concat> [ctx'', ctx'])
               where 
                 (ty', ctx'') :=
                   <trans-rcv-payload> (pl, <concat> [ctx, ctx'], td_ctx) \ }); rev>
        (payload, ([], []))
  
  trans-interaction:
    (pname,
     To(msg, payload, from-role, opt-cont),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (signatures', states', choices')
    where
      not(Some(Continue(_)) := opt-cont)
    ; (tys, ctx') :=
        <trans-snd-interaction> (msg, payload, ctx, td_ctx)
    ; (state', new-state) := <concat; new-state> [ctx, ctx']
    ; sig :=
        Sig(msg,
            <parameterize-by-payloads> 
              (<mk-strans>
                 (Unit(),
                  List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                  Brack(App(Id("const"),
                    List([STCons(Id("l"), App(Id("StateT"), new-state))])))),
               tys))
    ; (signatures', states', choices') :=
        <trans-maybe-interaction> 
          (pname,
           opt-cont,
           <concat> [ctx, ctx'],
           rctx,
           td_ctx,
           <concat> [signatures, [sig]],
           <concat> [states, [state']],
           choices,
           new-state)

  
  trans-interaction:
    (pname,
     To(msg, payload, from-role, Some(Continue(r))),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (<concat> [signatures, [sig]], states, choices)
    where
      (tys, ctx') :=
        <trans-snd-interaction> (msg, payload, ctx, td_ctx)
    ; sig :=
        Sig(msg,
            <parameterize-by-payloads> 
              (<mk-strans>
                 (Unit(),
                  List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                  Brack(App(Id("const"),
                    List([STCons(Id("l"), App(Id("StateT"), <lookup> (r, rctx)))])))),
               tys))

  trans-snd-interaction:
    (msg, payload, ctx, td_ctx) ->
      <foldl({ ctx'', ty' :
             \ (pl, (tys', ctx')) ->
                 ([ty'|tys'], <concat> [ctx'', ctx'])
               where
                 (ty', ctx'') :=
                   <trans-snd-payload> (pl, <concat> [ctx, ctx'], td_ctx) \ }); rev>
        (payload, ([], []))

  trans-interaction: // FIXME: handle case where interaction branches are none
    (pname,
     Choice(role, Some(interaction), or-choices),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (<concat> [signatures, [sig], signatures1],
       <concat> [states, states1],
       <concat> [choices, choices', choices1])
    where
      <string-tokenize(|['_']); last; equal(|role)> pname // local choice
    ; (signatures0, states0, choices0, opt-new-state0) :=
        <trans-branch>
          (pname,
           interaction,
           ctx, rctx, td_ctx, signatures, states, choices, prev-state)
    ; (signatures1, states1, choices1, new-states) :=
        <foldr(!(signatures0, states0, choices0, <unpack-opt-new-state> opt-new-state0),
          { signatures'', states'', choices'', opt-new-state'' :
          \ (Or(Some(i)), (signatures', states', choices', new-states')) ->
              (<conc> (signatures', signatures''),
               <conc> (states', states''),
               <conc> (choices', choices''),
               <conc> (new-states', <unpack-opt-new-state> opt-new-state''))
            where
              (signatures'', states'', choices'', opt-new-state'') :=
                <trans-branch>
                  (pname,
                   i,
                   ctx, rctx, td_ctx, signatures, states, choices, prev-state) \ })>
          or-choices
    ; sig-name-base := <concat-strings> ["choice_", role]
    ; postfix := <get-counter; int-to-string> sig-name-base
    ; sig-name := <concat-strings> [sig-name-base, postfix]
    ; choice-name := <concat-strings> ["Choice_", role, postfix]
    ; <next-counter> sig-name-base
    ; (sig, choices') :=
        <local-gen-choice-sig>
          (sig-name, choice-name, new-states,
           <new-choice> (choice-name, new-states), prev-state)

  local-gen-choice-sig:
    (sig-name, choice-name, new-states@[(msg, new-state, tys)], _, prev-state) ->
      (Sig(sig-name,
          <parameterize-by-payloads> 
            (<mk-strans>
               (Unit(),
                List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                Brack(App(Id("const"),
                  List([STCons(Id("l"), App(Id("StateT"), new-state))])))),
             tys)), [])
    where 
      // hacky: generating a new choice side-effectfully incremented the choice counter; now we decrement it...
      <prev-counter> "C"

  local-gen-choice-sig:
    (sig-name, choice-name, new-states@[_|[_|_]], choice@Data(_, ks), prev-state) ->
      (Sig(sig-name,
        PiT("l", <mk-type-id> "Var",
          PiTBr("choice", <mk-type-id> choice-name,
            <mk-strans>
               (Unit(),
                  List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                  Brack(App(Id("const"),
                    List([STCons(Id("l"), App(Id("StateT"),
                      Brack(
                        Case(Id("choice"),
                          <zip; map(choice-case)> (ks, new-states)))))]))))))),
       [choice])

  trans-interaction: // FIXME: handle case where interaction branches are none
    (pname,
     Choice(role, Some(interaction), or-choices),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (<concat> [signatures, [sig], signatures1],
       <concat> [states, states1],
       <concat> [choices, choices', choices1])
    where
      not(<string-tokenize(|['_']); last; equal(|role)> pname) // non-local choice
    ; (signatures0, states0, choices0, opt-new-state0) :=
        <trans-branch>
          (pname,
           interaction,
           ctx, rctx, td_ctx, signatures, states, choices, prev-state)
    ; (signatures1, states1, choices1, new-states) :=
        <foldr(!(signatures0, states0, choices0, <unpack-opt-new-state> opt-new-state0),
          { signatures'', states'', choices'', opt-new-state'' :
          \ (Or(Some(i)), (signatures', states', choices', new-states')) ->
              (<conc> (signatures'', signatures'),
               <conc> (states', states''),
               <conc> (choices', choices''),
               <conc> (new-states', <unpack-opt-new-state> opt-new-state''))
            where
              (signatures'', states'', choices'', opt-new-state'') :=
                <trans-branch>
                  (pname,
                   i,
                   ctx, rctx, td_ctx, signatures, states, choices, prev-state) \ })>
          or-choices
    ; sig-name-base := <concat-strings> ["choice_", role]
    ; postfix := <get-counter; int-to-string> sig-name-base
    ; sig-name := <concat-strings> [sig-name-base, postfix]
    ; choice-name := <concat-strings> ["Choice_", role, postfix]
    ; <next-counter> sig-name-base
    ; (sig, choices') :=
        <non-local-gen-choice-sig>
          (sig-name, choice-name, new-states,
           <new-choice> (choice-name, new-states), prev-state)
    
  non-local-gen-choice-sig: 
    (sig-name, choice-name, new-states@[_|[_|_]], choice@Data(_, ks), prev-state) ->
      (Sig(sig-name,
        PiTBr("l", <mk-type-id> "Var",
          <mk-strans>
             (Id(choice-name),
                List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
                Brack(
                  FunBr("choice",
                    List([STCons(Id("l"), App(Id("StateT"),
                      Brack(
                        Case(Id("choice"),
                          <zip; map(choice-case)> (ks, new-states)))))])))))),
      [choice])
  
  non-local-gen-choice-sig:
    (sig-name, choice-name, new-states@[(msg, new-state, tys)], _, prev-state) ->
      (Sig(sig-name,
        PiTBr("l", <mk-type-id> "Var",
          <mk-strans>
            (<payload-types-to-return-types> tys,
             List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
             <generalize-rcv-result> (new-state, tys)))),
       [])

  choice-case:
    (K(choice-case-name, _, _, _),
     (msg, new-state, tys)) ->
      Case(App(choice-case-name, <map(payload-to-id)> tys), new-state)
    where
      <reset-counter> "payloadId"

  payload-to-id:
    SingletonDecl(x, _) -> Id(x)
  
  payload-to-id:
    SimpleType(_) ->
      Id(<concat-strings> ["x", <get-counter; int-to-string> "payloadId"])
    where
      <next-counter> "payloadId"
      
  payload-to-id:
    SingletonRef(_, _) ->
      Id(<concat-strings> ["x", <get-counter; int-to-string> "payloadId"])
    where
      <next-counter> "payloadId"

  unpack-opt-new-state:
    None() -> []
  
  unpack-opt-new-state:
    Some(new-state) -> [new-state]

  trans-interaction:
    (pname,
     Rec(r, opt-interaction),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      <trans-maybe-interaction>
        (pname, opt-interaction,
         ctx, <concat> [rctx, [("r", prev-state)]], td_ctx,
         signatures, states, choices, prev-state)
  
//  trans-interaction:
//    (pname,
//     Continue(r),
//     ctx, rctx, signatures, states, choices, prev-state) ->
//      (<concat> [signatures, [sig]], states, choices)
//    where
//      sig :=
//        Sig(<concat-strings> ["rec_", r],
//          PiTBr("l", <mk-type-id> "Var",
//            <mk-strans>
//              (Unit(),
//               List([STCons(Id("l"), App(Id("StateT"), prev-state))]),
//               Brack(App(Id("const"),
//                 List([STCons(Id("l"), App(Id("StateT"), <lookup> (r, rctx)))]))))))

rules // Translation of branch of conditional

  trans-branch: // Case 'To' followed by a recursive call
    (pname,
     To(msg, payload, from-role, Some(Continue(r))),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      ([],
       [],
       [],
       Some((msg, <lookup> (r, rctx), tys)))
    where
      (tys, ctx') :=
        <trans-snd-interaction> (msg, payload, ctx, td_ctx)

  trans-branch: // Case 'From' followed by a recursive call
    (pname,
     From(msg, payload, from-role, Some(Continue(r))),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      ([],
       [],
       [],
       Some((msg, <lookup> (r, rctx), tys)))
    where
      (tys, ctx') :=
        <trans-rcv-interaction> (msg, payload, ctx, td_ctx)
  
  trans-branch: // Case 'To' followed by anything else but a recursive call
    (pname,
     To(msg, payload, from-role, opt-cont),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (<diff> (signatures', signatures),
       <diff> (states', states),
       <diff> (choices', choices),
       Some((msg, new-state, tys)))
    where
      not(Some(Continue(_)) := opt-cont)
    ; (tys, ctx') :=
        <trans-snd-interaction> (msg, payload, ctx, td_ctx)
    ; (state', new-state) := <concat; new-state> [ctx, ctx']
    ; (signatures', states', choices') :=
        <trans-maybe-interaction> 
          (pname,
           opt-cont,
           <concat> [ctx, ctx'],
           rctx,
           td_ctx,
           <concat> [signatures],
           <concat> [states, [state']],
           choices,
           new-state)

  trans-branch: // Case 'From' followed by anything else but a recursive call
    (pname,
     From(msg, payload, from-role, opt-cont),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      (<diff> (signatures', signatures),
       <diff> (states', states),
       <diff> (choices', choices),
       Some((msg, new-state, tys)))
    where
      not(Some(Continue(_)) := opt-cont)
    ; (tys, ctx') :=
        <trans-rcv-interaction> (msg, payload, ctx, td_ctx)
    ; (state', new-state) := <concat; new-state> [ctx, ctx']
    ; (signatures', states', choices') :=
        <trans-maybe-interaction> 
          (pname,
           opt-cont,
           <concat> [ctx, ctx'],
           rctx,
           td_ctx,
           <concat> [signatures],
           <concat> [states, [state']],
           choices,
           new-state)

  trans-branch:
    (pname,
     Continue(_),
     ctx, rctx, td_ctx, signatures, states, choices, prev-state) ->
      ([],
       [],
       [],
       None())

rules // Translation of payload reception

  trans-rcv-payload:
    (Type(Int()), _, _) ->
      (SimpleType(Id("Int")), [])

  trans-rcv-payload:
    (Type(String()), _, _) ->
      (SimpleType(Id("String")), [])

  trans-rcv-payload: // FIXME: t should not be a reference to a singleton type
    (Ston(x, t), ctx, td_ctx) ->
      (SingletonDecl(x, ty'), [(x, ty')|ctx'])
    where
      (SimpleType(ty'), ctx') := <trans-rcv-payload> (Type(t), ctx, td_ctx)
    ; <new-counter> x
  
  trans-rcv-payload:
    (Type(Id(x)), ctx, _) ->
      (SimpleType(Brack(DPairT(new-x,
                                 <lookup> (x, ctx),
                                 Eq(Id(new-x), Id(x))))),
        [])
    where
      new-x := <concat-strings> [x, <get-counter; int-to-string> x]

rules // Translation of payload transmission

  trans-snd-payload:
    (Type(Int()), _, _) ->
      (SimpleType(Id("Int")), [])

  trans-snd-payload:
    (Type(String()), _, _) ->
      (SimpleType(Id("String")), [])

  trans-snd-payload: // assumption: cannot type a type variable by a singleton type
    (Ston(x, t), ctx, td_ctx) ->
      (SingletonDecl(x, ty'), [(x, ty')|ctx'])
    where
      (SimpleType(ty'), ctx') := <trans-snd-payload> (Type(t), ctx, td_ctx)
    ; <new-counter> x

  trans-snd-payload:
    (Type(Id(x)), ctx, _) ->
      (SingletonRef(x, <lookup> (x, ctx)), [])

rules // Generalize final state by variables being received; 'from' case

  generalize-rcv-result:
    (state, []) ->
      Brack(
        App(Id("const"), 
          List([STCons(Id("l"), App(Id("StateT"), state))])))
      
  generalize-rcv-result:
    (state, [SingletonDecl(x, _)]) ->
      Brack(
        Fun(x, 
          List([STCons(Id("l"), App(Id("StateT"), state))])))

  generalize-rcv-result:
    (state, [SimpleType(_)]) ->
      Brack(
        App(Id("const"), 
          List([STCons(Id("l"), App(Id("StateT"), state))])))
  
  generalize-rcv-result:
    (state, tys) ->
      Brack(
        FunBr("r",
          List([STCons(Id("l"), App(Id("StateT"),
            Brack(
              Case(Id("r"),
                [Case(Brack(App("MkDPair", <map(ty-to-pat)> tys)), state)]))))])))
  
  ty-to-pat:
    SingletonDecl(x, _) -> Id(x)

  ty-to-pat:
    SingletonRef(_, _) -> Id("_")

  ty-to-pat:
    SimpleType(_) -> Id("_")

rules // Parameterize command by payload being sent; 'to' case

  parameterize-by-payloads:
    (trans, []) ->
      PiTBr("l", <mk-type-id> "Var", trans)
      
      
  parameterize-by-payloads:
    (trans, tys@[_|_]) ->
      PiT("l", <mk-type-id> "Var",
        <init;
         foldr(!<parameterize-by-payload-br> (<last> tys, trans),
               parameterize-by-payload)> tys)
    where
      <reset-counter> "paramId"

  parameterize-by-payload-br:
    (SimpleType(ty), trans) ->
      ArrowTBr(ExprT(ty), trans)
      
  parameterize-by-payload-br:
    (SingletonRef(x, ty), trans) ->
      PiTBr(x, ExprT(ty), trans)
    where
      new-x := <concat-strings> [x, <next-counter; int-to-string> "paramId"]
    ; <next-counter> "paramId"

  parameterize-by-payload-br:
    (SingletonDecl(x, ty), trans) ->
      PiTBr(x, ExprT(ty), trans)

  parameterize-by-payload:
    (SimpleType(ty), trans) ->
      ArrowT(ExprT(ty), trans)
      
  parameterize-by-payload:
    (SingletonDecl(x, ty), trans) ->
      PiT(x, ExprT(ty), trans)

  parameterize-by-payload:
    (SingletonRef(x, ty), trans) ->
      PiT(x, ExprT(Brack(DPairT(new-x, ty, Eq(Id(new-x), Id(x))))), trans)
    where
      new-x := <concat-strings> [x, <next-counter; int-to-string> "paramId"]
    ; <next-counter> "paramId"

  unpack:
    SimpleType(ty) -> ("_", ty)
  
  unpack:
    SingletonDecl(x, ty) -> (x, ty)

  unpack:
    SingletonRef(x, ty) -> (x, ty)

rules

  payload-types-to-return-types:
    [] -> Unit()
  
  payload-types-to-return-types:
    [ty] -> <unpack; Snd> ty
  
  payload-types-to-return-types:
    tys@[_|[_|_]] ->
      Brack(<init;
             foldr(!<last; unpack; Snd> tys, 
                   { name, rty :
                   \ (ty, prod) -> DPairT(name, rty, prod)
                     where
                       (name, rty) := <unpack> ty \ })> tys)

rules // State constructor and name

  new-state:
    ctx ->
      (K(state-name,
         <parameterize-by-ctx> ctx,
         "State",
         []),
       <foldl(\ ((x , t), st) -> App(st, Id(x)) \); 
        brack-if-needed(|ctx)> (ctx, Id(state-name)))
    where
      state-name := <mk-state-id> ()

  mk-state-id:
    () -> <concat-strings> ["S", <get-counter; int-to-string> "S"]
    with
      <next-counter> "S"

rules // Choice constructor and name

  new-choice:
    (choice-name, new-states) ->
      Data(choice-name,
        <map(
          { choice-case-name :
          \ (msg, _, tys) ->
              K(<ucfirst> msg, <parameterize-by-payloads> tys, choice-name, []) \ })> new-states)

//  mk-choice-id:
//    () -> <concat-strings> ["C", <get-counter; int-to-string> "C"]
//    with
//      <next-counter> "C"

rules // Parameterize a data type by a context of singletons

  parameterize-by-ctx:
    [] -> None()
  
  parameterize-by-ctx:
    ctx@[_|_] ->
      Some(<map(\ (x, t) -> NamedParam(Param(x, ExprT(t))) \)> ctx)

rules // Parameterize a data type by a list of singletons

  parameterize-by-payloads:
    [] -> None()
  
  parameterize-by-payloads:
    tys@[_|_] ->
      Some(<map(payload-to-param)> tys)
  
  payload-to-param:
    SingletonDecl(x, t) -> NamedParam(Param(x, ExprT(t)))
  
  payload-to-param:
    SimpleType(t) -> Param(ExprT(t))
  
  payload-to-param:
    SingletonRef(x, t) -> NamedParam(Param(x, ExprT(t)))

rules // Helpers

  mk-type-id:
    x -> ExprT(Id(x))
  
  mk-strans:
    (return-type, pre-state, post-state) ->
      ExprT(AppBr(AppBr(App(App(Id("STrans"), Id("m")), return-type), pre-state), post-state))

  mk-strans-nobr: // no AppBr for layout
    (return-type, pre-state, post-state) ->
      ExprT(App(App(App(App(Id("STrans"), Id("m")), return-type), pre-state), post-state))


  brack-if-needed(|ctx):
    t -> Brack(t)
    where
      [_|_] := ctx
  
  brack-if-needed(|ctx):
    t -> t
    where
      [] := ctx
      
  prev-counter =
    ?c; get-counter; dec; where(<set-counter> (c, <id>))

  rev:
    (tys, ctx) ->
      (<reverse> tys, <reverse> ctx)
  
  // Borrowed from https://github.com/metaborg/relations/blob/develop/relations/trans/lib/string.str
	ucfirst-chars: [c|rest] -> [<to-upper>c|rest]
  ucfirst = string-as-chars(ucfirst-chars)

